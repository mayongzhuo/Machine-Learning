import tensorflow as tf
import time,math
def inference_op(images):
    with tf.name_scope("conv1"):
        kernel=tf.Variable(tf.truncated_normal([11,11,3,96],dtype=tf.float32,stddev=1e-1),name="weights")
        conv=tf.nn.conv2d(images,kernel,[1,4,4,1],padding="SAME")
        biases=tf.Variable(tf.constant(0.0,shape=[96],dtype=tf.float32),trainable=True,name="biases")
        conv1=tf.nn.relu(tf.nn.bias_add(conv,biases))
    lrn1=tf.nn.lrn(conv1,4,bias=1.0,alpha=0.001/9.0,beta=0.75,name="lrn1")
    pool1=tf.nn.max_pool(lrn1,ksize=[1,3,3,1],strides=[1,2,2,1],padding="VALID",name="pool1")

    with tf.name_scope("conv2"):
        kernel2=tf.Variable(tf.truncated_normal([5,5,96,256],dtype=tf.float32,stddev=1e-1),name="weights")
        conv=tf.nn.conv2d(pool1,kernel2,[1,1,1,1],padding="SAME")
        biases=tf.Variable(tf.constant(0.0,shape=[256],dtype=tf.float32),trainable=True,name="biases")
        conv2=tf.nn.relu(tf.nn.bias_add(conv,biases))
    lrn2=tf.nn.lrn(conv2,4,bias=1.0,alpha=0.001/9.0,beta=0.75,name="lrn2")
    pool2=tf.nn.max_pool(lrn2,ksize=[1,3,3,1],strides=[1,2,2,1],padding="VALID",name="pool2")

    with tf.name_scope("conv3"):
        kernel3=tf.Variable(tf.truncated_normal([3,3,256,384],dtype=tf.float32,stddev=1e-1),name="weights")
        conv=tf.nn.conv2d(pool2,kernel3,[1,1,1,1],padding="SAME")
        biases=tf.Variable(tf.constant(0.0,shape=[384],dtype=tf.float32),trainable=True,name="biases")
        conv3=tf.nn.relu(tf.nn.bias_add(conv,biases))

    with tf.name_scope("conv4"):
        kernel4=tf.Variable(tf.truncated_normal([3,3,384,384],dtype=tf.float32,stddev=1e-1),name="weights")
        conv=tf.nn.conv2d(conv3,kernel4,[1,1,1,1],padding="SAME")
        biases=tf.Variable(tf.constant(0.0,shape=[384],dtype=tf.float32),trainable=True,name="biases")
        conv4=tf.nn.relu(tf.nn.bias_add(conv,biases))

    with tf.name_scope("conv5"):
        kernel5=tf.Variable(tf.truncated_normal([3,3,384,256],dtype=tf.float32,stddev=1e-1),name="weights")
        conv=tf.nn.conv2d(conv4,kernel5,[1,1,1,1],padding="SAME")
        biases=tf.Variable(tf.constant(0.0,shape=[256],dtype=tf.float32),trainable=True,name="biases")
        conv5=tf.nn.relu(tf.nn.bias_add(conv,biases))
    pool5=tf.nn.max_pool(conv5,ksize=[1,3,3,1],strides=[1,2,2,1],padding="VALID",name="pool5")
    pool_shape=pool5.get_shape().as_list()
    nodes=pool_shape[1]*pool_shape[2]*pool_shape[3]
    reshaped=tf.reshape(pool5,[pool_shape[0],nodes])

    with tf.name_scope("fc_1"):
        fc1_weights=tf.Variable(tf.truncated_normal([nodes,4096],dtype=tf.float32,stddev=1e-1),name="weights")
        fc1_bias=tf.Variable(tf.constant(0.0,shape=[4096],dtype=tf.float32),trainable=True,name="biases")
        fc_1=tf.nn.relu(tf.matmul(reshaped,fc1_weights)+fc1_bias)

    with tf.name_scope("fc_2"):
        fc2_weights=tf.Variable(tf.truncated_normal([4096,4096],dtype=tf.float32,stddev=1e-1),name="weights")
        fc2_bias=tf.Variable(tf.constant(0.0,shape=[4096],dtype=tf.float32),trainable=True,name="biases")
        fc_2=tf.nn.relu(tf.matmul(fc_1,fc2_weights)+fc2_bias)

    return fc_2
